################################
#   TYPE
################################
type Service {
    id: ID!
    identifier: String!
    name: String!
    http_method: String!
    url: String!
    boby: String
    json: String
    response: String 
    comment: String
    response_json: String
    procedures: [ModelProcedure!] @hasMany
}


################################
#   INPUT
################################

input CreateServiceInput {
    identifier: String @rules(apply: ["required"])
    name: String @rules(apply: ["required"])
    http_method: String @rules(apply: ["required"])
    url: String @rules(apply: ["required"])
    boby: String
    json: String
    response: String 
    comment: String
    response_json: String
}

input UpdateServiceInput {
    id: ID!
    identifier: String @rules(apply: ["required"])
    name: String @rules(apply: ["required"])
    http_method: String @rules(apply: ["required"])
    url: String @rules(apply: ["required"])
    boby: String
    json: String
    response: String 
    comment: String
    response_json: String
}

################################
#   QUERY
################################
extend type Query {
    services: [Service!]!
        @all(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\Service")

    service(id: ID! @eq): Service
        @find(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\Service")
}

################################
#   MUTATOR
################################
extend type Mutation {
    createService(input: CreateServiceInput! @spread): Service
        @create(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\Service")

    updateService(input: UpdateServiceInput! @spread): Service
        @update(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\Service")

    deleteService(
        id: ID!
    ): Service
        @delete(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\Service")
}
