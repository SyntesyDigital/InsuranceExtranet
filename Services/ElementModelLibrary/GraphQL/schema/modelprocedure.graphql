################################
#   TYPE
################################
type ModelProcedure {
    id: ID!
    name: String!
    configurable: String
    required: String
    repeatable: String
    repeatable_json: String
    repeatable_jsonpath: String
    preload: String
    prefixed: Boolean
    duplicate: Boolean
    order: Int
    service: Service! @belongsTo
    elementModel: ElementModel! @belongsTo
    fields: [ModelField!]! @hasMany
}


################################
#   INPUT
################################
input CreateModelProcedureInput {
    name: String!
    configurable: String
    required: String
    repeatable: String
    repeatable_json: String
    repeatable_jsonpath: String
    prefixed: Boolean
    duplicate: Boolean
    preload: String
    service_id: ID
    model_id: ID
    order: Int
}


input UpdateModelProcedureInput {
    id: ID!
    name: String!
    configurable: String
    required: String
    repeatable: String
    repeatable_json: String
    repeatable_jsonpath: String
    prefixed: Boolean
    duplicate: Boolean
    preload: String
    service_id: ID
    model_id: ID
    order: Int
    #fields: UpdateModelProcedureFieldsHasMany
}

input UpdateModelProcedureFieldsHasMany {
  create: [CreateModelFieldInput!]
  upsert: [CreateModelFieldInput!]
  update: [UpdateModelFieldInput!]
  delete: [ID!]
}

################################
#   QUERY
################################
extend type Query @middleware(checks: ["auth:veos-ws-token"]) {
    modelProcedures: [ModelProcedure!]!
        @all(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\ModelProcedure")

    modelProcedure(id: ID! @eq): ModelProcedure
        @find(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\ModelProcedure")
}



################################
#   MUTATOR
################################
extend type Mutation @middleware(checks: ["auth:veos-ws-token"]) {
    createModelProcedure(input: CreateModelProcedureInput! @spread): ModelProcedure
        @create(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\ModelProcedure")

    updateModelProcedure(input: UpdateModelProcedureInput! @spread): ModelProcedure
        @update(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\ModelProcedure")

    deleteModelProcedure(
        id: ID!
    ): ModelProcedure
        @delete(model: "Modules\\Extranet\\Services\\ElementModelLibrary\\Entities\\ModelProcedure")
}
