################################
#   TYPE
################################
type Role {
    id: ID!
    name: String!
    identifier: String!
    icon: String!
    default : Boolean!
    description: String
    permissions: [Permission!]! @belongsToMany
    users: [User!]! @belongsToMany
}

################################
#   INPUT
################################
input CreateRoleInput {
    name: String!
    identifier: String!
    icon: String!
    default : Boolean!
    description: String
    permissions: PermissionsInput
}

input UpdateRoleInput {
    id: ID!
    name: String
    identifier: String
    icon: String
    default : Boolean
    description: String
    permissions: PermissionsInput
}

input RolesInput {
    connect: [ID!]
    sync: [ID!]
    create: [CreateRoleInput!]
    update: [UpdateRoleInput!]
    upsert: [UpdateRoleInput!]
}

input PermissionsInput {
    connect: [ID!]
    sync: [ID!]
    create: [CreatePermissionInput!]
    update: [UpdatePermissionInput!]
    upsert: [UpdatePermissionInput!]
}



################################
#   QUERY
################################
extend type Query {
    roles: [Role!]!
        @all(model: "Modules\\Extranet\\Services\\RolesPermissions\\Entities\\Role")

    role(id: ID! @eq): Role
        @find(model: "Modules\\Extranet\\Services\\RolesPermissions\\Entities\\Role")
}

################################
#   MUTATOR
################################
type Mutation {
    createRole(input: CreateRoleInput! @spread): Role
        @create(model: "Modules\\Extranet\\Services\\RolesPermissions\\Entities\\Role")

    updateRole(input: UpdateRoleInput! @spread): Role
        @update(model: "Modules\\Extranet\\Services\\RolesPermissions\\Entities\\Role")

    deleteRole(
        id: ID!
    ): Role
        @delete(model: "Modules\\Extranet\\Services\\RolesPermissions\\Entities\\Role")
}
